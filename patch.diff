*** Begin Patch
*** Update File: agent/plc_agent/api/server.py
@@
-import json
-import os
-from http.server import BaseHTTPRequestHandler, HTTPServer
-from urllib.parse import urlparse, parse_qs
+import json
+import os
+import time
+from http.server import BaseHTTPRequestHandler, HTTPServer
+from urllib.parse import urlparse, parse_qs
@@
-class _Handler(BaseHTTPRequestHandler):
-    server_version = "PLCLoggerAgent/0.1"
-
-    def _set_json(self, status=200):
-        self.send_response(status)
-        self.send_header("Content-Type", "application/json")
-        self.send_header("Cache-Control", "no-store")
-        self.end_headers()
+class _Handler(BaseHTTPRequestHandler):
+    server_version = "PLCLoggerAgent/0.1"
+
+    def _cors_origin(self) -> str:
+        return os.environ.get("CORS_ORIGIN") or "http://127.0.0.1:5173"
+
+    def _set_json(self, status=200):
+        self.send_response(status)
+        self.send_header("Content-Type", "application/json")
+        self.send_header("Cache-Control", "no-store")
+        # CORS headers for fallback server
+        self.send_header("Access-Control-Allow-Origin", self._cors_origin())
+        self.send_header("Access-Control-Allow-Credentials", "true")
+        self.send_header("Access-Control-Allow-Headers", "*, x-agent-token, authorization, content-type")
+        self.send_header("Access-Control-Allow-Methods", "GET,POST,PUT,DELETE,OPTIONS")
+        self.end_headers()
@@
-    def do_GET(self):
+    def do_OPTIONS(self):
+        # Preflight CORS
+        self._set_json(204)
+        try:
+            self.wfile.write(b"{}")
+        except Exception:
+            pass
+
+    def do_GET(self):
         if not self._is_authorized():
             self._set_json(401)
             self.wfile.write(json.dumps({"success": False, "error": "PERMISSION_DENIED", "message": "Missing or invalid token"}).encode("utf-8"))
             return
         path = urlparse(self.path).path
+        if path == "/auth/handshake":
+            tok = os.environ.get("AGENT_TOKEN") or ""
+            self._set_json(200)
+            self.wfile.write(json.dumps({"token": tok}).encode("utf-8"))
+            return
         if path == "/health":
             body = {
                 "status": "ok",
                 "agent": "plc-agent",
                 "version": "0.1.0",
             }
             self._set_json(200)
             self.wfile.write(json.dumps(body).encode("utf-8"))
             return
-        if path == "/schemas":
-            self._set_json(200)
-            self.wfile.write(json.dumps({"items": []}).encode("utf-8"))
-            return
-        if path == "/jobs":
-            self._set_json(200)
-            self.wfile.write(json.dumps({"items": []}).encode("utf-8"))
-            return
+        try:
+            if path == "/devices":
+                from .store import Store
+                from .appdb import init as _init
+                _init(); Store.instance().load_from_app_db()
+                items = Store.instance().list_devices()
+                self._set_json(200)
+                self.wfile.write(json.dumps({"items": items}).encode("utf-8"))
+                return
+            if path == "/storage/targets":
+                from .appdb import load_targets as _load
+                tgs, default_id = _load()
+                self._set_json(200)
+                self.wfile.write(json.dumps({"items": tgs, "defaultId": default_id}).encode("utf-8"))
+                return
+            if path == "/networking/gateways":
+                from .store import Store
+                from .appdb import init as _init
+                _init(); Store.instance().load_from_app_db()
+                items = Store.instance().list_gateways()
+                self._set_json(200)
+                self.wfile.write(json.dumps({"items": items}).encode("utf-8"))
+                return
+            if path == "/schemas":
+                from .store import Store
+                from .appdb import init as _init
+                _init(); Store.instance().load_from_app_db()
+                items = Store.instance().list_schemas()
+                self._set_json(200)
+                self.wfile.write(json.dumps({"items": items}).encode("utf-8"))
+                return
+            if path == "/jobs":
+                from .store import Store
+                from .appdb import init as _init
+                _init(); Store.instance().load_from_app_db()
+                items = Store.instance().list_jobs()
+                self._set_json(200)
+                self.wfile.write(json.dumps({"items": items}).encode("utf-8"))
+                return
+        except Exception as e:
+            self._set_json(500)
+            self.wfile.write(json.dumps({"error": "internal_error", "message": str(e)}).encode("utf-8"))
+            return
         self._set_json(404)
         self.wfile.write(json.dumps({"error": "not_found"}).encode("utf-8"))
 
     def do_POST(self):
         if not self._is_authorized():
             self._set_json(401)
             self.wfile.write(json.dumps({"success": False, "error": "PERMISSION_DENIED", "message": "Missing or invalid token"}).encode("utf-8"))
             return
-        self._set_json(501)
-        self.wfile.write(json.dumps({"error": "not_implemented"}).encode("utf-8"))
+        path = urlparse(self.path).path
+        try:
+            length = int(self.headers.get('Content-Length') or 0)
+            body = self.rfile.read(length) if length > 0 else b"{}"
+            try:
+                payload = json.loads(body.decode('utf-8') or '{}')
+            except Exception:
+                payload = {}
+            if path == "/auth/handshake":
+                tok = os.environ.get("AGENT_TOKEN") or ""
+                self._set_json(200)
+                self.wfile.write(json.dumps({"token": tok}).encode("utf-8"))
+                return
+            if path == "/networking/ping":
+                t0 = time.perf_counter(); time.sleep(0.05)
+                dt = int((time.perf_counter() - t0) * 1000)
+                out = {"ok": False, "lossPct": 100, "min": 0, "avg": 0, "max": 0, "samples": [], "timeMs": dt}
+                self._set_json(200)
+                self.wfile.write(json.dumps(out).encode("utf-8"))
+                return
+            if path == "/networking/tcp_test":
+                out = {"status": "timeout", "timeMs": 0}
+                self._set_json(200)
+                self.wfile.write(json.dumps(out).encode("utf-8"))
+                return
+        except Exception as e:
+            self._set_json(500)
+            self.wfile.write(json.dumps({"error": "internal_error", "message": str(e)}).encode("utf-8"))
+            return
+        self._set_json(404)
+        self.wfile.write(json.dumps({"error": "not_found"}).encode("utf-8"))
*** End Patch
